// Edge Function: transaction-processor
// Processa transa√ß√µes da tabela RawTransactions, aplica limpeza e categoriza√ß√£o,
// e insere na tabela Transaction com ID gerado automaticamente usando CUID2

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { createId } from 'https://esm.sh/@paralleldrive/cuid2@2.2.2'

// Tipos para as estruturas de dados
interface RawTransaction {
  id: number
  belvo_id: string
  amount: number
  raw_description: string | null
  transaction_date: string
  type: string
  account_id: string | null
  raw_payload: any
  created_at: string
  status: string
}

interface CategorizationRule {
  id: string
  keyword: string
  categoryId: string
  normalizedDescription: string | null
}

interface Category {
  id: string
  name: string
  color: string
  userId: string
  createdAt: string
  updatedAt: string
}

interface ProcessedTransaction {
  id: string // ID gerado automaticamente com CUID
  description: string
  cleanedDescription: string | null
  amount: number
  categoryId: string
  date: string
  createdAt: string
  updatedAt: string
  userId: string
}

// Configura√ß√£o do ambiente
const supabaseUrl = Deno.env.get('SUPABASE_URL')!
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!

console.log('üîß Configura√ß√£o da Edge Function:')
console.log('- SUPABASE_URL:', supabaseUrl ? 'Configurado' : 'N√ÉO CONFIGURADO')
console.log('- SERVICE_KEY:', supabaseServiceKey ? 'Configurado' : 'N√ÉO CONFIGURADO')

// CORS headers helper
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

serve(async (req) => {
  try {
    console.log('üöÄ Edge Function transaction-processor iniciada')
    console.log('üì• M√©todo da requisi√ß√£o:', req.method)
    console.log('üì• Headers da requisi√ß√£o:', Object.fromEntries(req.headers.entries()))

    // Handle CORS preflight requests
    if (req.method === 'OPTIONS') {
      return new Response(null, {
        status: 200,
        headers: corsHeaders,
      });
    }

    // Verificar se √© uma requisi√ß√£o POST
    if (req.method !== 'POST') {
      console.log('‚ùå M√©todo n√£o permitido:', req.method)
      return new Response(
        JSON.stringify({ error: 'M√©todo n√£o permitido. Use POST.' }),
        { 
          status: 405, 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders
          } 
        }
      )
    }

    // Ler o payload da requisi√ß√£o
    const payload = await req.json()
    console.log('üì¶ Payload recebido:', JSON.stringify(payload, null, 2))

    // Extrair o record do payload do gatilho do Supabase
    const record = payload.record
    if (!record) {
      console.log('‚ùå Nenhum record encontrado no payload')
      return new Response(
        JSON.stringify({ error: 'Nenhum record encontrado no payload' }),
        { 
          status: 400, 
          headers: { 
            'Content-Type': 'application/json',
            ...corsHeaders
          } 
        }
      )
    }

    console.log('üìã Record extra√≠do:', JSON.stringify(record, null, 2))

    // Inicializar cliente Supabase
    const supabase = createClient(supabaseUrl, supabaseServiceKey)
    console.log('‚úÖ Cliente Supabase inicializado')

    // Processar a transa√ß√£o
    const result = await processTransaction(supabase, record)
    
    console.log('‚úÖ Transa√ß√£o processada com sucesso:', result)
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Transa√ß√£o processada com sucesso',
        result 
      }),
      { 
        status: 200, 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders
        } 
      }
    )

  } catch (error) {
    console.error('üí• Erro na Edge Function:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Erro interno do servidor', 
        details: error.message,
        stack: error.stack 
      }),
      { 
        status: 500, 
        headers: { 
          'Content-Type': 'application/json',
          ...corsHeaders
        } 
      }
    )
  }
})

async function processTransaction(supabase: any, rawTransaction: RawTransaction) {
  console.log('üîÑ Iniciando processamento da transa√ß√£o:', rawTransaction.belvo_id)

  try {
    // 1. Verificar se a transa√ß√£o j√° foi processada
    console.log('üîç Verificando se a transa√ß√£o j√° foi processada...')
    const { data: existingTransaction, error: checkError } = await supabase
      .from('Transaction')
      .select('id')
      .eq('description', rawTransaction.raw_description || `Transa√ß√£o ${rawTransaction.belvo_id}`)
      .single()

    if (checkError && checkError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao verificar transa√ß√£o existente:', checkError)
      throw new Error(`Erro ao verificar transa√ß√£o existente: ${checkError.message}`)
    }

    if (existingTransaction) {
      console.log('‚ö†Ô∏è Transa√ß√£o j√° processada, pulando:', existingTransaction.id)
      return { 
        action: 'skipped', 
        reason: 'Transa√ß√£o j√° processada',
        transactionId: existingTransaction.id 
      }
    }

    // 2. Limpar a descri√ß√£o da transa√ß√£o
    console.log('üßπ Limpando descri√ß√£o da transa√ß√£o...')
    const cleanedDescription = cleanDescription(rawTransaction.raw_description || '')
    console.log('üìù Descri√ß√£o original:', rawTransaction.raw_description)
    console.log('‚ú® Descri√ß√£o limpa:', cleanedDescription)

    // 3. Buscar regras de categoriza√ß√£o
    console.log('üìã Buscando regras de categoriza√ß√£o...')
    const { data: rules, error: rulesError } = await supabase
      .from('CategorizationRule')
      .select(`
        id,
        keyword,
        categoryId,
        normalizedDescription
      `)

    if (rulesError) {
      console.error('‚ùå Erro ao buscar regras de categoriza√ß√£o:', rulesError)
      throw new Error(`Erro ao buscar regras: ${rulesError.message}`)
    }

    console.log(`üìä ${rules?.length || 0} regras de categoriza√ß√£o encontradas`)

    // 4. Aplicar categoriza√ß√£o
    console.log('üéØ Aplicando categoriza√ß√£o...')
    const categorizationResult = await categorizeTransaction(supabase, cleanedDescription, rules || [])
    console.log('üè∑Ô∏è Categoria determinada:', categorizationResult.categoryId)
    console.log('üìù Descri√ß√£o final:', categorizationResult.finalCleanedDescription)

    // 5. Gerar ID √∫nico usando CUID2
    const transactionId = createId()
    console.log('üÜî ID gerado para a transa√ß√£o:', transactionId)

    // 6. Preparar dados da transa√ß√£o processada
    const now = new Date().toISOString()
    const processedTransaction: ProcessedTransaction = {
      id: transactionId, // ID gerado automaticamente
      description: rawTransaction.raw_description || `Transa√ß√£o ${rawTransaction.belvo_id}`,
      cleanedDescription: categorizationResult.finalCleanedDescription,
      amount: rawTransaction.amount,
      categoryId: categorizationResult.categoryId,
      date: rawTransaction.transaction_date,
      createdAt: now,
      updatedAt: now,
      userId: 'test-user-placeholder' // Valor fixo para testes
    }

    console.log('üíæ Dados da transa√ß√£o processada:', JSON.stringify(processedTransaction, null, 2))

    // 7. Inserir na tabela Transaction
    console.log('üíæ Inserindo transa√ß√£o processada na tabela Transaction...')
    const { data: insertedTransaction, error: insertError } = await supabase
      .from('Transaction')
      .insert(processedTransaction)
      .select()
      .single()

    if (insertError) {
      console.error('‚ùå Erro ao inserir transa√ß√£o:', insertError)
      throw new Error(`Erro ao inserir transa√ß√£o: ${insertError.message}`)
    }

    console.log('‚úÖ Transa√ß√£o inserida com sucesso:', insertedTransaction.id)

    // 8. Atualizar status da RawTransaction para PROCESSED
    console.log('üîÑ Atualizando status da RawTransaction...')
    const { error: updateError } = await supabase
      .from('RawTransactions')
      .update({ status: 'PROCESSED' })
      .eq('id', rawTransaction.id)

    if (updateError) {
      console.error('‚ö†Ô∏è Erro ao atualizar status da RawTransaction:', updateError)
      // N√£o falhar o processo por causa disso
    } else {
      console.log('‚úÖ Status da RawTransaction atualizado para PROCESSED')
    }

    return {
      action: 'processed',
      transactionId: insertedTransaction.id,
      originalDescription: rawTransaction.raw_description,
      cleanedDescription: categorizationResult.finalCleanedDescription,
      categoryId: categorizationResult.categoryId,
      amount: rawTransaction.amount
    }

  } catch (error) {
    console.error('üí• Erro no processamento da transa√ß√£o:', error)
    
    // Atualizar status para ERROR em caso de falha
    try {
      await supabase
        .from('RawTransactions')
        .update({ status: 'ERROR' })
        .eq('id', rawTransaction.id)
      console.log('‚ö†Ô∏è Status da RawTransaction atualizado para ERROR')
    } catch (updateError) {
      console.error('‚ùå Erro ao atualizar status para ERROR:', updateError)
    }
    
    throw error
  }
}

function cleanDescription(description: string): string {
  console.log('üßπ Iniciando limpeza da descri√ß√£o:', description)
  
  if (!description || description.trim() === '') {
    console.log('‚ö†Ô∏è Descri√ß√£o vazia, retornando string vazia')
    return ''
  }

  let cleaned = description.trim()
  
  // Remover apenas caracteres especiais espec√≠ficos, mantendo letras e espa√ßos
  cleaned = cleaned.replace(/[*#@$%&+=\[\]{}|\\:";'<>?,./]/g, ' ')
  
  // Remover sequ√™ncias de n√∫meros muito longos (8+ d√≠gitos, provavelmente IDs)
  cleaned = cleaned.replace(/\b\d{8,}\b/g, ' ')
  
  // Remover c√≥digos alfanum√©ricos muito espec√≠ficos (mantendo palavras normais)
  cleaned = cleaned.replace(/\b[A-Z]{3,}[0-9]{3,}\b/g, ' ')
  cleaned = cleaned.replace(/\b[0-9]{3,}[A-Z]{3,}\b/g, ' ')
  
  // Remover m√∫ltiplos espa√ßos
  cleaned = cleaned.replace(/\s+/g, ' ')
  
  // Converter para min√∫sculas para padroniza√ß√£o
  cleaned = cleaned.toLowerCase().trim()
  
  console.log('‚ú® Descri√ß√£o limpa:', cleaned)
  return cleaned
}

async function categorizeTransaction(
  supabase: any, 
  cleanedDescription: string, 
  rules: CategorizationRule[]
): Promise<{ categoryId: string; finalCleanedDescription: string }> {
  console.log('üéØ Iniciando categoriza√ß√£o para:', cleanedDescription)
  console.log(`üìã Avaliando ${rules.length} regras`)

  // Buscar categoria padr√£o
  console.log('üîç Buscando categoria padr√£o...')
  const { data: defaultCategory, error: defaultError } = await supabase
    .from('Category')
    .select('id')
    .eq('name', 'Outros')
    .single()

  if (defaultError) {
    console.error('‚ùå Erro ao buscar categoria padr√£o:', defaultError)
    // Se n√£o encontrar "Outros", buscar qualquer categoria
    const { data: anyCategory, error: anyError } = await supabase
      .from('Category')
      .select('id')
      .limit(1)
      .single()
    
    if (anyError) {
      console.error('‚ùå Erro ao buscar qualquer categoria:', anyError)
      throw new Error('Nenhuma categoria encontrada no sistema')
    }
    
    console.log('‚ö†Ô∏è Usando primeira categoria dispon√≠vel como padr√£o:', anyCategory.id)
    return { categoryId: anyCategory.id, finalCleanedDescription: cleanedDescription }
  }

  const defaultCategoryId = defaultCategory.id
  console.log('‚úÖ Categoria padr√£o encontrada:', defaultCategoryId)

  // Aplicar regras de categoriza√ß√£o por prioridade
  for (const rule of rules) {
    console.log(`üîç Avaliando regra: ${rule.keyword}`)
    console.log(`üìù Keyword: "${rule.keyword}"`)
    
    const keyword = rule.keyword.toLowerCase()
    const description = cleanedDescription.toLowerCase()
    
    // Verifica se a descri√ß√£o cont√©m a keyword
    const matches = description.includes(keyword)
    
    console.log(`${matches ? '‚úÖ' : '‚ùå'} Regra ${rule.keyword}: ${matches ? 'MATCH' : 'NO MATCH'}`)
    
    if (matches) {
      console.log(`üéØ Categoria determinada pela regra "${rule.keyword}": ${rule.categoryId}`)
      
      // Usar normalizedDescription se dispon√≠vel, sen√£o usar a descri√ß√£o limpa original
      const finalDescription = rule.normalizedDescription || cleanedDescription
      console.log(`üìù Descri√ß√£o final: ${finalDescription}`)
      
      return { categoryId: rule.categoryId, finalCleanedDescription: finalDescription }
    }
  }
  
  console.log(`üè∑Ô∏è Nenhuma regra aplic√°vel, usando categoria padr√£o: ${defaultCategoryId}`)
  return { categoryId: defaultCategoryId, finalCleanedDescription: cleanedDescription }
}

console.log('üöÄ Edge Function transaction-processor carregada e pronta!')
